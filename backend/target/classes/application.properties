server.port=8080
spring.application.name=authorization


# # Server configuration
# server.port=9000
# server.ssl.enabled=true
# server.ssl.key-store=classpath:keystore.p12 # Path to your keystore (JKS/PKCS12)
# server.ssl.key-store-password=your_keystore_password
# server.ssl.key-store-type=PKCS12
# server.ssl.key-alias=your_key_alias

# # Database configuration (PostgreSQL example)
# spring.datasource.url=jdbc:postgresql://localhost:5432/auth_server_db
# spring.datasource.username=auth_user
# spring.datasource.password=auth_password
# spring.datasource.driver-class-name=org.postgresql.Driver
# spring.jpa.hibernate.ddl-auto=update # Use 'validate' or 'none' in production, generate schema separately
# spring.jpa.show-sql=false

# # Spring Security / Authorization Server specific properties
# # Customize issuer URI for production
# spring.security.oauth2.authorization-server.issuer=https://your-auth-server.com:9000
# # JWT token settings (consider short validity for access tokens, longer for refresh)
# spring.security.oauth2.authorization-server.token.access-token.time-to-live=15m
# spring.security.oauth2.authorization-server.token.refresh-token.time-to-live=30d

# # Customizing endpoints (optional, but if you do, keep it consistent)
# # spring.security.oauth2.authorization-server.authorization-endpoint.uri=/oauth2/authorize
# # spring.security.oauth2.authorization-server.token-endpoint.uri=/oauth2/token
# # spring.security.oauth2.authorization-server.jwk-set-endpoint.uri=/oauth2/jwks
# # spring.security.oauth2.authorization-server.token-revocation-endpoint.uri=/oauth2/revoke
# # spring.security.oauth2.authorization-server.token-introspection-endpoint.uri=/oauth2/introspect